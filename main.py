import os
import asyncio
from dataclasses import dataclass
from typing import Optional, List, Union

import discord
from discord import app_commands
from discord.ext import commands
from yt_dlp import YoutubeDL
from dotenv import load_dotenv
import itertools


load_dotenv()

YDL_OPTS_BASE = {
    "format": "bestaudio/best",
    "noplaylist": False,          # –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–ª–µ–π–ª–∏—Å—Ç–∏
    "quiet": True,
    "default_search": "ytsearch", # –¥–æ–∑–≤–æ–ª—è—î –ø–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
    "skip_download": True,
    "extract_flat": False,        # –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ –ø–æ—Ç–æ–∫—É
    "cachedir": False,
    "source_address": "0.0.0.0",
    "postprocessors": [],
}

FFMPEG_OPTS = {
    "before_options": "-nostdin",
    "options": "-vn"
}

intents = discord.Intents.default()
intents.message_content = True
intents.voice_states = True
bot = commands.Bot(command_prefix="!", intents=intents)

@dataclass
class Track:
    url: str             # –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
    title: str
    webpage_url: str     # —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –≤—ñ–¥–µ–æ (–¥–ª—è –ø–æ–≤‚Äô—è–∑–∞–Ω–∏—Ö)
    stream_url: str      # –ø—Ä—è–º–∏–π –∞—É–¥—ñ–æ–ø–æ—Ç—ñ–∫
    duration: Optional[int] = None
    uploader: Optional[str] = None
    id: Optional[str] = None

class YTDLP:
    def __init__(self):
        self.ydl = YoutubeDL(YDL_OPTS_BASE)

    def extract(self, query: str):
        """–ü–æ–≤–µ—Ä—Ç–∞—î info_dict –¥–ª—è –≤—ñ–¥–µ–æ/–ø–ª–µ–π–ª–∏—Å—Ç–∞/–ø–æ—à—É–∫—É."""
        return self.ydl.extract_info(query, download=False)

    def build_track(self, info) -> Track:
        # –¥–ª—è adaptive —Ñ–æ—Ä–º–∞—Ç—ñ–≤ yt-dlp –≤—ñ–¥–¥–∞—î 'url' –ø—Ä—è–º–æ–≥–æ –ø–æ—Ç–æ–∫—É
        stream_url = info.get("url")
        if not stream_url:
            # —ñ–Ω–∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–µ–Ω –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Ñ–æ—Ä–º–∞—Ç—É
            with YoutubeDL({**YDL_OPTS_BASE, "format": "bestaudio/best"}) as y2:
                info2 = y2.process_ie_result(info, download=False)
                stream_url = info2.get("url")

        return Track(
            url=info.get("original_url") or info.get("webpage_url") or info.get("url"),
            title=info.get("title", "Unknown"),
            webpage_url=info.get("webpage_url") or info.get("url", ""),
            stream_url=stream_url,
            duration=info.get("duration"),
            uploader=info.get("uploader"),
            id=info.get("id"),
        )

    def expand_input(self, query_or_url: str) -> List[Track]:
        """–ü—Ä–∏–π–º–∞—î URL/–ø–æ—à—É–∫. –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫—ñ–≤ (1 –∞–±–æ –±–∞–≥–∞—Ç–æ, —è–∫—â–æ –ø–ª–µ–π–ª–∏—Å—Ç)."""
        info = self.extract(query_or_url)
        tracks: List[Track] = []

        # –ø–ª–µ–π–ª–∏—Å—Ç –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
        if info.get("_type") == "playlist" or "entries" in info:
            entries = info.get("entries") or []
            # –¥–ª—è –ø–æ—à—É–∫—É –±–µ—Ä–µ–º–æ –ø–µ—Ä—à–µ (ytsearchN)
            if info.get("ie_key", "").lower().startswith("youtubesearch"):
                entries = entries[:1]
            for e in entries:
                if not e:
                    continue
                if e.get("_type") == "url":
                    # —ñ–Ω–∫–æ–ª–∏ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è "url" –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π ‚Äî –≤–∏—Ç—è–≥–Ω–µ–º–æ –≤–¥—Ä—É–≥–µ
                    e = self.extract(e["url"])
                # –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ–æ—Ä–º–∞—Ç—É —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è stream_url
                if "url" not in e:
                    e = self.ydl.process_ie_result(e, download=False)
                tracks.append(self.build_track(e))
        else:
            # –æ–¥–∏–Ω–æ—á–Ω–µ –≤—ñ–¥–µ–æ
            tracks.append(self.build_track(info))

        return tracks

    def get_related(self, video_webpage_url: str) -> Optional[Track]:
        """
        –°–ø—Ä–æ–±–∞ –¥—ñ—Å—Ç–∞—Ç–∏ –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ (recommended) –≤—ñ–¥–µ–æ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
        –Ø–∫—â–æ yt-dlp –Ω–µ –ø–æ–≤–µ—Ä–Ω–µ related, —Ä–æ–±–∏–º–æ –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é.
        """
        try:
            info = self.extract(video_webpage_url)
            # yt-dlp —á–∞—Å—Ç–æ –∫–ª–∞–¥–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ —Å—é–¥–∏:
            related = info.get("related_videos") or info.get("related") or []
            for r in related:
                vid = r.get("id") or r.get("url")
                if not vid:
                    continue
                candidate = f"https://www.youtube.com/watch?v={vid}" if len(vid) == 11 else vid
                tr = self.expand_input(candidate)
                if tr:
                    return tr[0]
        except Exception:
            pass

        # –§–æ–ª–±–µ–∫: –ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é + uploader
        title = info.get("title") if "info" in locals() else None
        uploader = info.get("uploader") if "info" in locals() else None
        if title:
            q = f"ytsearch1:{title} {uploader or ''}"
            tr = self.expand_input(q)
            return tr[0] if tr else None

        return None

class GuildPlayer:
    def __init__(self, guild: discord.Guild):
        self.guild = guild
        self.queue: asyncio.Queue[Track] = asyncio.Queue()
        self.current: Optional[Track] = None
        self.next_event = asyncio.Event()
        self.autoplay = False
        self.lock = asyncio.Lock()
        self.audio_task: Optional[asyncio.Task] = None
        self.yt = YTDLP()

    async def ensure_voice(self, interaction: discord.Interaction):
        if not interaction.user.voice or not interaction.user.voice.channel:
            raise RuntimeError("–ó–∞–π–¥—ñ—Ç—å —É –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª.")
        vc = interaction.guild.voice_client
        if vc and vc.channel == interaction.user.voice.channel:
            return vc
        if vc and vc.channel != interaction.user.voice.channel:
            await vc.move_to(interaction.user.voice.channel)
            return vc
        return await interaction.user.voice.channel.connect(self_deaf=True)

    async def add(self, tracks: List[Track]):
        for t in tracks:
            await self.queue.put(t)

    def _play_source(self, vc: discord.VoiceClient, track: Track):
        def after_play(err):
            if err:
                print(f"Player error: {err}")
            self.next_event.set()

        source = discord.FFmpegPCMAudio(track.stream_url, **FFMPEG_OPTS)
        vc.play(source, after=after_play)

    async def player_loop(self, vc: discord.VoiceClient, channel: discord.TextChannel):
        while True:
            self.next_event.clear()
            # –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫: –∑ —á–µ—Ä–≥–∏ –∞–±–æ –∑ autoplay
            if self.queue.empty() and self.autoplay and self.current:
                # –±–µ—Ä–µ–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
                rel = self.yt.get_related(self.current.webpage_url)
                if rel:
                    await self.queue.put(rel)

            self.current = await self.queue.get()
            await channel.send(f"‚ñ∂Ô∏è **–ì—Ä–∞—î:** {self.current.title}")

            self._play_source(vc, self.current)
            await self.next_event.wait()

            # –Ø–∫—â–æ –∑—É–ø–∏–Ω–µ–Ω–æ –≤—Ä—É—á–Ω—É ‚Äî –≤–∏–π–¥–µ–º–æ —ñ–∑ —Ü–∏–∫–ª—É
            if not vc.is_connected():
                break

    async def start_if_needed(self, vc: discord.VoiceClient, channel: discord.TextChannel):
        if self.audio_task and not self.audio_task.done():
            return
        self.audio_task = asyncio.create_task(self.player_loop(vc, channel))

players: dict[int, GuildPlayer] = {}

def get_player(guild: discord.Guild) -> GuildPlayer:
    if guild.id not in players:
        players[guild.id] = GuildPlayer(guild)
    return players[guild.id]

# --------- SLASH –ö–û–ú–ê–ù–î–ò ---------

@bot.event
async def on_ready():
    try:
        await bot.tree.sync()
    except Exception as e:
        print("Slash sync error:", e)

    print(f"Logged in as {bot.user} (ID: {bot.user.id})")

    # –¶–∏–∫–ª—ñ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å—ñ–≤
    statuses = itertools.cycle([
        discord.Activity(type=discord.ActivityType.watching, name="YouTube —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó üéß"),
        discord.Game(name="/join")
    ])

    # –ë–µ–∑–∫—ñ–Ω–µ—á–Ω–∏–π —Ü–∏–∫–ª –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
    while True:
        await bot.change_presence(activity=next(statuses))
        await asyncio.sleep(10)  # –º—ñ–Ω—è—î –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥

@bot.tree.command(name="join", description="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å —É –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–∏–π –∫–∞–Ω–∞–ª")
async def join(interaction: discord.Interaction):
    gp = get_player(interaction.guild)
    try:
        vc = await gp.ensure_voice(interaction)
        await interaction.response.send_message(f"‚úÖ –£ –∫–∞–Ω–∞–ª—ñ: **{vc.channel.name}**", ephemeral=True)
    except Exception as e:
        await interaction.response.send_message(f"‚ùå {e}", ephemeral=True)

@bot.tree.command(name="leave", description="–í–∏–π—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É")
async def leave(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if vc:
        await vc.disconnect(force=True)
    await interaction.response.send_message("üëã –í–∏–π—à–æ–≤.", ephemeral=True)

@bot.tree.command(name="play", description="–î–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫/–ø–ª–µ–π–ª–∏—Å—Ç –∞–±–æ –ø–æ—à—É–∫–∞—Ç–∏ –Ω–∞ YouTube")
@app_commands.describe(query="URL –∞–±–æ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç")
async def play(interaction: discord.Interaction, query: str):
    await interaction.response.defer(thinking=True)
    gp = get_player(interaction.guild)
    try:
        vc = await gp.ensure_voice(interaction)
    except Exception as e:
        await interaction.followup.send(f"‚ùå {e}")
        return

    try:
        tracks = gp.yt.expand_input(query)
        if not tracks:
            await interaction.followup.send("–ù–µ –∑–Ω–∞–π—à–æ–≤ –Ω—ñ—á–æ–≥–æ –∑–∞ –∑–∞–ø–∏—Ç–æ–º.")
            return

        await gp.add(tracks)
        added = f"–î–æ–¥–∞–≤ **{len(tracks)}** —Ç—Ä–µ–∫(–∏)." if len(tracks) > 1 else f"–î–æ–¥–∞–≤: **{tracks[0].title}**"
        await interaction.followup.send(added)

        await gp.start_if_needed(vc, interaction.channel)
    except Exception as e:
        await interaction.followup.send(f"–ü–æ–º–∏–ª–∫–∞: {e}")

@bot.tree.command(name="queue", description="–ü–æ–∫–∞–∑–∞—Ç–∏ —á–µ—Ä–≥—É")
async def queue_cmd(interaction: discord.Interaction):
    gp = get_player(interaction.guild)
    qsize = gp.queue.qsize()
    msg = []
    if gp.current:
        msg.append(f"üéß –ó–∞—Ä–∞–∑: **{gp.current.title}**")
    if qsize == 0:
        msg.append("–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è.")
    else:
        # –ø–µ—Ä–µ–≥–ª—è–Ω–µ–º–æ, –Ω–µ –≤–∏–π–º–∞—é—á–∏
        items: List[Track] = []
        for _ in range(qsize):
            t = await gp.queue.get()
            items.append(t)
        for t in items:
            await gp.queue.put(t)
        lst = "\n".join([f"{i+1}. {t.title}" for i, t in enumerate(items[:15])])
        msg.append(f"üßæ –ß–µ—Ä–≥–∞ ({qsize}):\n{lst}")
    await interaction.response.send_message("\n".join(msg), ephemeral=True)

@bot.tree.command(name="skip", description="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ç—Ä–µ–∫")
async def skip(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if not vc or not vc.is_playing():
        await interaction.response.send_message("–ù—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î.", ephemeral=True)
        return
    vc.stop()
    await interaction.response.send_message("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏–≤.", ephemeral=True)

@bot.tree.command(name="pause", description="–ü–∞—É–∑–∞")
async def pause(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if not vc or not vc.is_playing():
        await interaction.response.send_message("–ù—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î.", ephemeral=True)
        return
    vc.pause()
    await interaction.response.send_message("‚è∏Ô∏è –ü–∞—É–∑–∞.", ephemeral=True)

@bot.tree.command(name="resume", description="–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏")
async def resume(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    if not vc:
        await interaction.response.send_message("–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π.", ephemeral=True)
        return
    vc.resume()
    await interaction.response.send_message("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏–≤.", ephemeral=True)

@bot.tree.command(name="stop", description="–ó—É–ø–∏–Ω–∏—Ç–∏ —ñ –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É")
async def stop(interaction: discord.Interaction):
    vc = interaction.guild.voice_client
    gp = get_player(interaction.guild)
    # –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É
    try:
        while not gp.queue.empty():
            gp.queue.get_nowait()
            gp.queue.task_done()
    except Exception:
        pass
    if vc:
        vc.stop()
    await interaction.response.send_message("‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ. –ß–µ—Ä–≥—É –æ—á–∏—â–µ–Ω–æ.", ephemeral=True)

@bot.tree.command(name="autoplay", description="–ê–≤—Ç–æ–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º–∏ —Ç—Ä–µ–∫–∞–º–∏ YouTube")
@app_commands.describe(mode="on / off")
async def autoplay(interaction: discord.Interaction, mode: str):
    gp = get_player(interaction.guild)
    mode = mode.lower()
    if mode not in ("on", "off"):
        await interaction.response.send_message("–í–∫–∞–∂—ñ—Ç—å: on –∞–±–æ off.", ephemeral=True)
        return
    gp.autoplay = (mode == "on")
    await interaction.response.send_message(f"üîÅ Autoplay: **{mode}**", ephemeral=True)

@bot.tree.command(name="now", description="–©–æ –∑–∞—Ä–∞–∑ –≥—Ä–∞—î")
async def now(interaction: discord.Interaction):
    gp = get_player(interaction.guild)
    if gp.current:
        await interaction.response.send_message(f"üéß **{gp.current.title}**\n{gp.current.webpage_url}", ephemeral=True)
    else:
        await interaction.response.send_message("–ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î.", ephemeral=True)

if __name__ == "__main__":
    token = os.getenv("DISCORD_TOKEN")
    if not token:
        raise SystemExit("–í–∫–∞–∂—ñ—Ç—å DISCORD_TOKEN —É .env")
    bot.run(token)
